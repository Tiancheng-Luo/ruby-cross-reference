# -*- mode: perl -*-
# Configuration file
#
#	$Id: lxr.conf,v 1.38 2011/03/27 17:35:59 ajlittoz Exp $
#
(
		################################
		# Global configuration section #
		################################

	{
		# Auxiliary tools subsection #
		#============================#

		# Place where lxr can write temporary files
	  'tmpdir' => '/tmp'

		# Define this OR the swish-e variable depending which search engine you want to use.
		# Path to glimpse executables.
	, 'glimpsebin'   => '/usr/local/bin/glimpse'
	, 'glimpseindex' => '/usr/local/bin/glimpseindex'
		# Location of SWISH-E binary
#	, 'swishbin' => '/usr/bin/swish-e'

		# Path to Exuberant Ctags executable
	, 'ectagsbin' => '/usr/bin/ctags'
		# Location of the ectags.conf file
	, 'ectagsconf' => '/var/www/rxr.whitequark.org/lxr/lib/LXR/Lang/ectags.conf'

		# Paths for CVS module
#	, 'cvspath' => '/bin:/usr/local/bin:/usr/bin:/usr/sbin'

		# HTML subsection #
		#=================#

		# All paths in this subsection are relative to LXR root directory

		# Templates used for headers and footers
	, 'htmlfatal'		=> 'templates/html-fatal.html'
	, 'htmlhead'		=> 'templates/html-head.html'
	, 'htmltail'		=> 'templates/html-tail.html'
	, 'htmldir'			=> 'templates/html-dir.html'
	, 'htmlident'		=> 'templates/html-ident.html'
	, 'htmlsearch'		=> 'templates/html-search-glimpse.html'

		# htmlhead and htmltail can be customised for the various
		# LXR operations. Just replace html by source (listing file),
		# sourcedir (displaying directory), diff (difference markup),
		# ident (identifier search), search (free-text search)
		# as below (which changes nothing):
#	, 'sourcehead'		=> 'templates/html-head.html'
#	, 'sourcedirhead'	=> 'templates/html-head.html'

		# CSS style sheet
	, 'stylesheet'		=> '/stylesheets/style.css'

		# Default character encoding
	, 'encoding'	=> 'utf-8',

		# File content subsection #
		#=========================#

		# Which extensions to treat as images when browsing.  If a file is an image,
		# it is displayed.
	, 'graphicfile' =>
		'(bitmap|bmp|gif|icon|jp2|jpg|jpeg|pjpg|pjpeg|png|tif|tiff|xbm|xpm)'

		# Location of the Generic.pm config file
	, 'genericconf' => '/var/www/rxr.whitequark.org/lxr/lib/LXR/Lang/generic.conf'

		# How to map files to languages
		# Note that the string for the key and the first entry in the
		# array MUST match
	, 'filetype' =>
			# Format is
			# Language name, filepatten regexp, module to invoke,
			# (optional )tabwidth
			# Note that to have another language supported by Generic.pm,
			# you must ensure that:
			# a) exuberant ctags supports it
			# b) generic.conf is updated to specify information about the language
			# c) the name of the language given here matches the entry in generic.conf
		{ 'C' =>
			[ 'C'
			, '\.c$|\.pc|\.y$'
			, 'LXR::Lang::Generic'
			, '8'
			]
		, 'C++' =>
			[ 'C++'
			, '\.C$|((?i)\.c\+\+$|\.cc$|\.cpp$|\.cxx$|\.h$|\.hh$|\.hpp$|\.hxx$|\.h\+\+$)'    #'
			, 'LXR::Lang::Generic'
			, '8'
			]

			# Some languages are commented out until the relevant entries in generic.conf are made
			# The list here is the set supported by ctags 5.0.1
	#	, 'Beta'    => [ 'Beta',   '(?i)\.bet$', 'LXR::Lang::Generic' ]
	#	, 'Cobol' => [ 'Cobol',  '(?i)\.cob$', 'LXR::Lang::Cobol' ]
	#	, 'Eiffel'  => [ 'Eiffel', '(?i)\.e$',   'LXR::Lang::Generic' ]
	#	, 'Fortran' =>
	#		[ 'Fortran', '(?i)\.f$|\.for$|\.ftn$|\.f77$|\.f90$|\.f95$', 'LXR::Lang::Generic' ]
		, 'Java' => [ 'Java', '(?i)\.java$', 'LXR::Lang::Java', '4' ]

	#	, 'Lisp' =>
	#		[ 'Lisp'
	#		, '(?i)\.cl$|\.clisp$|\.el$|\.l$|\.lisp$|\.lsp$|\.ml$'
	#		, 'LXR::Lang::Generic'
	#		]

			# No tabwidth specified here as an example
		, 'Make' =>
			[ 'Make'
			, '(?i)\.mak$|(?i)\.mk$|makefile*'
			, 'LXR::Lang::Generic'
			]

	#	, 'Pascal' => [ 'Pascal', '(?i)\.p$|\.pas$',             'LXR::Lang::Generic' ]
		, 'Perl'   => [ 'Perl',   '(?i)\.pl$|\.pm$|\.perl$',     'LXR::Lang::Generic', '4' ]
	#	, 'php'    => [ 'php',    '(?i)\.php$|\.php3$|\.phtml$', 'LXR::Lang::Generic', '2' ]
	#	, 'Python' => [ 'Python', '(?i)\.py$|\.python$',         'LXR::Lang::Generic', '4' ]

	#	, 'rexx'   => [ 'rexx',   '(?i)\.cmd$|\.rexx$|\.rx$',       'LXR::Lang::Generic' ]
		, 'Ruby'   => [ 'Ruby',   '(?i)\.rb$',                      'LXR::Lang::Generic' ]
	#	, 'scheme' => [ 'scheme', '(?i)\.sch$|\.scheme$|\.scm$|\.sm$', 'LXR::Lang::Generic' ]
		, 'shell' => [ 'shell', '(?i)\.sh$|\.bsh$|\.bash$|\.ksh$|\.zsh$', 'LXR::Lang::Generic' ]

	#	, 's-Lang' => [ 's-Lang', '(?i)\.sl$',                'LXR::Lang::Generic' ]
	#	, 'SQL' => [ 'SQL', '(?i)\.sql$|\.pks$|\.pkb$',               'LXR::Lang::Generic' ]
	#	, 'VB'  => [ 'VB',  '(?i)\.bas$|\.cls$|\.ctl$|\.frm$|\.vbs$', 'LXR::Lang::Generic' ]
	#	, 'tcl' => [ 'tcl', '(?i)\.tcl$|\.wish$',                     'LXR::Lang::Generic' ]
		}

		# Maps interpreter names to languages.  The format is:
		#  regexp => langname
		#   regexp is matched against the part after #! on the first line of a file
		#   langname must match one of the keys in filetype above.
		#
		# This mapping is only used if the filename doesn't match a pattern above, so
		# a shell script called shell.c will be recognised as a C file, not a shell file.

	, 'interpreters' =>
		{ 'perl'	=> 'Perl'
		, 'bash'	=> 'shell'
		, 'csh'		=> 'shell'
#		, 'python'	=> 'Python'
		, 'ksh'		=> 'shell'
		, 'zsh'		=> 'shell'
		, 'sh'		=> 'shell'
		, 'ksh'		=> 'shell'
		, 'ruby'	=> 'Ruby'
		}

	, 'implementations' => [ 'mri', 'jruby', 'rubinius' ]

	}

	##### MRI

,	{
	  'baseurl'  => 'https://rxr.whitequark.org/mri/'
	, 'virtroot' => '/mri'

	, 'sourceroot' => '/var/www/rxr.whitequark.org/ruby/mri/'
	, 'sourcerootname' => 'Ruby MRI'

	, 'ignoredirs' => ['.git']

	, 'variables' =>
		{ 'v' =>
			{ 'name' => 'Version'
			, 'range' => [qw(1.8.7-p374 1.9.1-p431 1.9.2-p381 1.9.3-p547 2.0.0-p481 2.1.0 2.1.1 2.1.2 HEAD)]
			, 'default' => 'HEAD'
			}
		}

	, 'incprefix' => [ '/include', '/lib' ]

	, 'dbname' => 'dbi:mysql:dbname=rxr_mri'
	, 'dbpass'		=> 'XXXXXXXXX'
	, 'dbuser'		=> 'rxr'
	, 'dbprefix' => 'lxr_'
	, 'glimpsedir' => '/var/www/rxr.whitequark.org/glimpse/mri'
	}

	##### JRUBY

,	{
	  'baseurl'  => 'https://rxr.whitequark.org/jruby/'
	, 'virtroot' => '/jruby'

	, 'sourceroot' => '/var/www/rxr.whitequark.org/ruby/jruby/'
	, 'sourcerootname' => 'JRuby'

	, 'ignoredirs' => ['.git']

	, 'variables' =>
		{ 'v' =>
			{ 'name' => 'Version'
			, 'range' => [qw(1.6.7.2 HEAD)]
			, 'default' => 'HEAD'
			}
		}

	, 'incprefix' => [ '/include', '/src', '/lib/ruby/1.9' ]

	, 'dbname' => 'dbi:mysql:dbname=rxr_jruby'
	, 'dbpass'		=> 'XXXXXXXXX'
	, 'dbuser'		=> 'rxr'
	, 'dbprefix' => 'lxr_'
	, 'glimpsedir' => '/var/www/rxr.whitequark.org/glimpse/jruby'
	}

        ##### Rubinius

,       {
          'baseurl'  => 'https://rxr.whitequark.org/rubinius/'
        , 'virtroot' => '/rubinius'

        , 'sourceroot' => '/var/www/rxr.whitequark.org/ruby/rubinius/'
        , 'sourcerootname' => 'Rubinius'

        , 'ignoredirs' => ['.git']

        , 'variables' =>
                { 'v' =>
                        { 'name' => 'Version'
                        , 'range' => [qw(HEAD)]
                        , 'default' => 'HEAD'
                        }
                }

        , 'incprefix' => ['/', '/vm', '/lib']

        , 'dbname' => 'dbi:mysql:dbname=rxr_rbx'
        , 'dbpass'              => 'XXXXXXXXX'
        , 'dbuser'              => 'rxr'
        , 'dbprefix' => 'lxr_'
        , 'glimpsedir' => '/var/www/rxr.whitequark.org/glimpse/rubinius'
        }
)
